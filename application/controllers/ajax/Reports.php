<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Reports extends CI_Controller {

    
    function __construct()
    {
        parent::__construct();
    }

    public function index(){

    }

    public function report_expenses_bill()
    {     
        $id_building = $this->input->post("id",true);
        if ($id_building != ""){
            require_once("/system/helpers/dompdf/dompdf_config.inc.php");
            $this->load->helper(array('dompdf', 'file'));

            $building = Building::find($id_building);
            $data['properties'] = $building->properties;

            $html = $this->load->view('report/expense_bill',$data,true);

            $dompdf = new DOMPDF();
            $dompdf->load_html($html);
            $dompdf->set_paper("a4", "landscape" );
            $dompdf->render();
            $dompdf->stream("reporte.pdf");


        }
    }

    public function add_pay_day(){

        $this->load->library("form_validation");
        $this->form_validation->set_error_delimiters('<div class="error">', '</div>');

        if ($this->form_validation->run('add_pay_day') == FALSE){
            echo validation_errors();
        }
        else{
            $building = Building::find($this->input->post('building_id',true));

            $attr['date'] = $this->input->post('date',true);
            $attr['building_id'] = $this->input->post('building_id',true);
            $attr['hour_start'] = $this->input->post('hour_start',true);
            $attr['hour_end'] = $this->input->post('hour_end',true);
            $attr['minuts_start'] = $this->input->post('minuts_start',true);
            $attr['minuts_end'] = $this->input->post('minuts_end',true);
            $attr['period_date'] = $building->actual_period;

            BuildingPayDay::create($attr);

            echo "ok";
        }

    }



    public function delete_pay_day(){

        $pay_day_id = $this->input->post("id",true);

        if ($pay_day_id){
            $pay_day = BuildingPayDay::find($pay_day_id);
            if ($pay_day->delete())
                echo "ok";
        }
        else
            echo "error al eliminar";

    }

    public function get_building_periods(){
    
        $building_id = $this->input->post("id",true);
        
        if ($building_id != ""){
            echo get_select_building_periods($building_id);
        }
        
    }
    
    public function get_properties_select(){
        
        $building_id = $this->input->post("id",true);
        
        if ($building_id != ""){
            echo get_select_property_auxiliary($building_id);
        }
        
        
    }
    

    public function delete_autogenerated_pay_day(){

        $autogenerated_day_id = $this->input->post("id",true);

        if ($autogenerated_day_id){
            
            $autogenerated_day = BuildingAutogeneratedDays::find($autogenerated_day_id);
            if ($autogenerated_day->delete())
                echo "ok";
            
        }
        else
            echo "error al eliminar";


    }

    public function add_autogenerated_pay_day(){

        $building = Building::find($this->input->post('building_id',true));
        $attr['building_id'] = $this->input->post('building_id',true);
        $attr['multiplicity'] = $this->input->post('multiplicity',true);
        $attr['week_day'] = $this->input->post('week_day',true);
        $attr['hour_start'] = $this->input->post('hour_start',true);
        $attr['hour_end'] = $this->input->post('hour_end',true);
        $attr['minuts_start'] = $this->input->post('minuts_start',true);
        $attr['minuts_end'] = $this->input->post('minuts_end',true);
        $attr['period_date'] = $building->actual_period;

        BuildingAutogeneratedDays::create($attr);

        echo "ok";

    }

}
